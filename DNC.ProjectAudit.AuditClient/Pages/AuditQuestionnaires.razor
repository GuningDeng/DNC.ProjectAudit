@page "/AuditQuestionnaires"
@using DNC.ProjectAudit.Application.CQRS.Audits
@using DNC.ProjectAudit.Application.CQRS.People.Auditors
@using DNC.ProjectAudit.AuditClient.Components
@using DNC.ProjectAudit.AuditClient.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject AuditService AuditService
@inject AuditQuestionnaireService AuditQuestionnaireService;

@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@inject HttpClient httpClient
@inject NavigationManager Navigation

<PageTitle>@PageName</PageTitle>


<FluentBodyContent>
    @if (auditQuestionnaireDetailDTOs == null)
    {
        <p><em>Loading questions...</em></p>
    }
    else
    {
        <h3 class="mb-5">AuditQuestionnaires</h3>
        <div>
            <FluentDataGrid 
                Items="@auditQuestionnaireDetailDTOs!.AsQueryable()" 
                TGridItem="AuditQuestionnaireDetailDTO"
                Pagination="@pagination"
                MultiLine="true"
                RowSize="DataGridRowSize.Large"
            >
            <PropertyColumn Title="ID" Property="@(a => a.Id)" Sortable="true" />
                <PropertyColumn Title="Naam" Property="@(a => a.Name)" Sortable="true" />
                    <PropertyColumn Title="Beschrijving" Property="@(a => a.Description)" />
                    <PropertyColumn Title="Regio" Property="@(a => a.Region)" Sortable="true" />
                    <PropertyColumn Title="Is gestart" Property="@(a => a.IsStarted)" Sortable="true" />
                    <PropertyColumn Title="Is afgerond" Property="@(a => a.IsCompleted)" Sortable="true" />
                    <PropertyColumn Title="Deadline" Property="@(a => a.SubmissionDeadline)" Format="dd-MM-yyyy" Sortable="true" />
                    <TemplateColumn Title="Manage" Align="Align.Center">
                        <FluentButton @onclick="() => ManageQuestionair(context.Id)" IconEnd="@(new Icons.Regular.Size16.Edit())" />
                    </TemplateColumn>
                    <TemplateColumn Title="Assigning" Align="Align.Center">
                        <FluentButton @onclick="() => ShowDialog(context.Id)" IconEnd="@(new Icons.Regular.Size16.TaskListSquareLtr())" />
                    </TemplateColumn>
                    <TemplateColumn Title="Actions" Align="Align.Center">
                        <FluentButton @onclick="() => ViewQuestionair(context.Id)" IconEnd="@(new Icons.Regular.Size16.Eye())" IconOnly="true" />
                        <FluentButton @onclick="() => ShowDialog(context.Id)" IconEnd="@(new Icons.Regular.Size16.Delete())" IconOnly="true" />
                    </TemplateColumn>
            </FluentDataGrid>

            <FluentPaginator State="@pagination" />
        </div>
    }
</FluentBodyContent>


@if (isDialogVisible)
{
    <Dialog @bind-Visible="isDialogVisible" Title="Vragenlijst verwijderen" OnClose="CloseDialog" OnConfirm="ConfirmModal">
        <p>Weet u zeker dat u de vragenlijst wilt verwijderen?</p>
    </Dialog>

}

@code {
    private const string PageName = "AuditQuestionnaires";
    private AuditorDTO? auditorDTO;
    private List<AuditQuestionnaireDetailDTO>? auditQuestionnaireDetailDTOs;
    private List<AuditQuestionnaireDetailDTO>? PaginatedQuestionnaires => auditQuestionnaireDetailDTOs!.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();


    private int currentPage = 1;
    private int pageSize = 5; // Number of questionnaires per page
    private int TotalPages => (int)Math.Ceiling((double)auditQuestionnaireDetailDTOs!.Count / pageSize);

    private int selectedId = 0;
    private bool isDialogVisible = false;

    PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await this.httpClient.GetAsync("AuditQuestionnaires");
            if(request.IsSuccessStatusCode){
                Console.WriteLine("Access to api");
                auditorDTO = await AuditService.GetAuditorAsync();
                auditQuestionnaireDetailDTOs = await AuditQuestionnaireService.GetAuditQuestionnaireDetailDTOs();
            }
            else
            {
                Console.WriteLine("Can not be access to api");
            }
        }
        catch(Exception ex){
            Console.WriteLine(ex.Message);
        }     


    }

    private void ManageQuestionair(int id){
        Console.WriteLine($"edit:: {id}");
        Navigation.NavigateTo($"/ManageAuditQuestionnaire/{id}");
    }

    private void ViewQuestionair(int id){
        Console.WriteLine($"view:: {id}");
        Navigation.NavigateTo($"/AuditQuestionnaire/{id}");
    }

    private async Task DeleteQuestionair(int id){
        // Console.WriteLine($"Delete:: {id}");
        var response = await AuditQuestionnaireService.DeleteQuestionnaire(id);
        if(response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Delete success:: {id}");
        }
        else
        {
            Console.WriteLine($"Delete failed:: {id}");
        }

    }

    private void ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages) return;
        currentPage = newPage;
        Console.WriteLine($"change page: {newPage++}");
    }

    private void ShowDialog(int id)
    {
        isDialogVisible = true;
        this.selectedId = id;
    }

    private void CloseDialog()
    {
        isDialogVisible = false;
    }

    private async Task ConfirmModal()
    {
        await DeleteQuestionair(this.selectedId);
        await Task.Delay(700);
        isDialogVisible = false;

        // Redirect
        Navigation.NavigateTo("/AuditQuestionnaires", true);
    }

}
