@page "/AuditQuestionnaires"
@using DNC.ProjectAudit.Application.CQRS.Audits
@using DNC.ProjectAudit.Application.CQRS.People.Auditors
@using DNC.ProjectAudit.AuditClient.Services

@inject AuditService AuditService
@inject AuditQuestionnaireService AuditQuestionnaireService;

@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@inject HttpClient httpClient
@inject NavigationManager Navigation

<PageTitle>@PageName</PageTitle>

@if(auditQuestionnaireDetailDTOs == null){
    <p><em>Loading questions...</em></p>
}
else{
    <div class="card">
        <div class="card-header">
            @PageName
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Name</th>
                        <th scope="col">Description</th>
                        <th scope="col">Region</th>
                        <th scope="col">Is started</th>
                        <th scope="col">Is completed</th>
                        <th scope="col">Deadline</th>
                        <th scope="col">Edit</th>
                        <th scope="col">View</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var question in auditQuestionnaireDetailDTOs)
                    {
                        <tr>
                            <td>@question.Id</td>
                            <td>@question.Name</td>
                            <td>@question.Description</td>
                            <td>@question.Region</td>
                            <td>@question.IsStarted</td>
                            <td>@question.IsCompleted</td>
                            <td>@question.SubmissionDeadline</td>
                            <td>
                                <button class="btn btn-link" @onclick="() => EditQuestionair(question.Id)">
                                    <i class="fas fa-edit"></i> <!-- Font Awesome Edit Icon -->
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-link" @onclick="() => ViewQuestionair(question.Id)">
                                    <i class="fas fa-eye"></i> <!-- Font Awesome Eye Icon -->
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination Controls -->
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</a>
                    </li>
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <a class="page-link" @onclick="() => ChangePage(i)">@i</a>
                        </li>
                    }
                    <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                        <a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</a>
                    </li>
                </ul>
            </nav>

        </div>
    </div>
}

@code {
    private const string PageName = "AuditQuestionnaires";
    private AuditorDTO? auditorDTO;
    private List<AuditQuestionnaireDetailDTO>? auditQuestionnaireDetailDTOs;
    private List<AuditQuestionnaireDetailDTO>? PaginatedQuestionnaires => auditQuestionnaireDetailDTOs!.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();


    private int currentPage = 1;
    private int pageSize = 5; // Number of questionnaires per page
    private int TotalPages => (int)Math.Ceiling((double)auditQuestionnaireDetailDTOs!.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await this.httpClient.GetAsync("AuditQuestionnaires");
            if(request.IsSuccessStatusCode){
                Console.WriteLine("Access to api");
                auditorDTO = await AuditService.GetAuditorAsync();
                auditQuestionnaireDetailDTOs = await AuditQuestionnaireService.GetAuditQuestionnaireDetailDTOs();
            }
            else
            {
                Console.WriteLine("Can not be access to api");
            }
        }
        catch(Exception ex){
            Console.WriteLine(ex.Message);
        }     


    }

    private void EditQuestionair(int id){
        Console.WriteLine($"edit:: {id}");
    }

    private void ViewQuestionair(int id){
        Console.WriteLine($"view:: {id}");
        Navigation.NavigateTo($"/AuditQuestionnaire/{id}");
    }

    private void ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages) return;
        currentPage = newPage;
        Console.WriteLine($"change page: {newPage++}");
    }

}
